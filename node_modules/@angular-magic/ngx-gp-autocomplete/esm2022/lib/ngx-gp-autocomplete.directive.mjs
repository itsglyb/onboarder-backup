import { Directive, EventEmitter, Input, Output } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "./ngx-gp-autocomplete.service";
import * as i2 from "@googlemaps/js-api-loader";
export class NgxGpAutocompleteDirective {
    constructor(el, ngxGpAutocompleteService, loader, ngZone) {
        this.el = el;
        this.ngxGpAutocompleteService = ngxGpAutocompleteService;
        this.loader = loader;
        this.ngZone = ngZone;
        this.onAddressChange = new EventEmitter();
    }
    ngAfterViewInit() {
        if (!this.options) {
            this.options = this.ngxGpAutocompleteService.getOptions();
        }
        if (this.ngxGpAutocompleteService.getGooglePersistenceCheck()) {
            if (!this.isGoogleLibExists()) {
                this.loader.importLibrary("places").then(() => this.initialize(), console.error);
            }
        }
        else {
            this.loader.importLibrary("places").then(() => this.initialize(), console.error);
        }
    }
    isGoogleLibExists() {
        return !(!google || !google.maps || !google.maps.places);
    }
    initialize() {
        if (!this.isGoogleLibExists())
            throw new Error("Google maps library can not be found");
        this.autocomplete = new google.maps.places.Autocomplete(this.el.nativeElement, this.options);
        if (!this.autocomplete)
            throw new Error("Autocomplete is not initialized");
        if (!this.autocomplete.addListener != null) { // Check to bypass https://github.com/angular-ui/angular-google-maps/issues/270
            this.eventListener = this.autocomplete.addListener('place_changed', () => {
                this.handleChangeEvent();
            });
        }
        this.el.nativeElement.addEventListener('keydown', (event) => {
            if (!event.key) {
                return;
            }
            let key = event.key.toLowerCase();
            if (key == 'enter' && event.target === this.el.nativeElement) {
                event.preventDefault();
                event.stopPropagation();
            }
        });
        // according to https://gist.github.com/schoenobates/ef578a02ac8ab6726487
        if (window && window.navigator && window.navigator.userAgent && navigator.userAgent.match(/(iPad|iPhone|iPod)/g)) {
            setTimeout(() => {
                let containers = document.getElementsByClassName('pac-container');
                if (containers) {
                    let arr = Array.from(containers);
                    if (arr) {
                        for (let container of arr) {
                            if (!container)
                                continue;
                            container.addEventListener('touchend', (e) => {
                                e.stopImmediatePropagation();
                            });
                        }
                    }
                }
            }, 500);
        }
    }
    reset() {
        this.autocomplete.setComponentRestrictions(this.options.componentRestrictions);
        this.autocomplete.setTypes(this.options.types);
    }
    handleChangeEvent() {
        this.ngZone.run(() => {
            this.place = this.autocomplete.getPlace();
            if (this.place) {
                this.onAddressChange.emit(this.place);
            }
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.6", ngImport: i0, type: NgxGpAutocompleteDirective, deps: [{ token: i0.ElementRef }, { token: i1.NgxGpAutocompleteService }, { token: i2.Loader }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.2.6", type: NgxGpAutocompleteDirective, selector: "[ngx-gp-autocomplete]", inputs: { options: "options" }, outputs: { onAddressChange: "onAddressChange" }, exportAs: ["ngx-places"], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.6", ngImport: i0, type: NgxGpAutocompleteDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[ngx-gp-autocomplete]',
                    exportAs: 'ngx-places'
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1.NgxGpAutocompleteService }, { type: i2.Loader }, { type: i0.NgZone }]; }, propDecorators: { options: [{
                type: Input
            }], onAddressChange: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,